#include "SerialTransfer.h"
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SoftwareSerial.h>

//Creation Software serial
SoftwareSerial mSerial( 0,1);

//Declaration Oled
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

//Declaration communication
SerialTransfer myTransfer;

//Declaration structure a communiquer
struct STRUCT {
  int Joy1X ;
  int Joy1Y;
  int Joy2X;
  int Joy2Y;
  bool BPBuzzer;
  bool BPJoy1;
  bool BPJoy2;
  byte Mode;
  int Dist_sonar;
  bool RFID_State;
} testStruct;

//Declaration Boutons et Leds
const byte BPD=3;
const byte BPG=2;
const byte BPJD=10;
const byte BPJG=9;
const byte Led1R=8;
const byte Led1G=7;
const byte Led1B=6;
const byte Led2R=12;
const byte Led2G=4;
const byte Led2B=5;

bool BPD_state;
bool BPG_state;
bool BPJD_state;
bool BPJG_state;

unsigned long last_time;

bool acceuil=1;
bool menu=0;
bool mode=0;
byte L=0;
bool connection=0;


//Declarations symboles pour oled
static const unsigned char PROGMEM fleche[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xE0, 0xFF, 0xF8, 0xFF, 0xFE,
0xFF, 0xFE, 0xFF, 0xF8, 0x00, 0xE0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static const unsigned char PROGMEM bluetooth[] = {
0x00, 0x10, 0x18, 0x14, 0x92, 0x52, 0x34, 0x18, 0x18, 0x34, 0x52, 0x92, 0x14, 0x18, 0x10, 0x00
};


static const unsigned char PROGMEM signal1[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x6C, 0x00, 0x6C, 0x03, 0x6C,
0x03, 0x6C, 0x1B, 0x6C, 0x1B, 0x6C, 0x1B, 0x6C, 0x1B, 0x6C, 0x1B, 0x6C, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char PROGMEM nosignal1[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x6C, 0x00, 0x6C, 0x03, 0x6C,
0x03, 0x00, 0x1B, 0x44, 0x1B, 0x28, 0x1B, 0x10, 0x1B, 0x28, 0x1B, 0x44, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char PROGMEM battery5 [] = {
0x3C, 0xFF, 0x81, 0xBD, 0xBD, 0x81, 0xBD, 0xBD, 0x81, 0xBD, 0xBD, 0x81, 0xBD, 0xBD, 0x81, 0xFF
};

static const unsigned char PROGMEM battery4 [] = {
0x3C, 0xFF, 0x81, 0x81, 0x81, 0x81, 0xBD, 0xBD, 0x81, 0xBD, 0xBD, 0x81, 0xBD, 0xBD, 0x81, 0xFF
};

static const unsigned char PROGMEM battery3 [] = {
0x3C, 0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xBD, 0xBD, 0x81, 0xBD, 0xBD, 0x81, 0xFF
};

static const unsigned char PROGMEM battery2 [] = {
0x3C, 0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xBD, 0xBD, 0x81, 0xFF
};

static const unsigned char PROGMEM battery1 [] = {
0x3C, 0xFF, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF
};


static const unsigned char PROGMEM image_data_Saraarray[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x3F, 0xE0, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x38, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x3F, 0xF8, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x07, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00,
0x00, 0x00, 0x00, 0x18, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x0F, 0xFF, 0x80,
0x00, 0x00, 0x00, 0x63, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x1F, 0xFE,
0x00, 0x00, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF,
0x00, 0x00, 0x6F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3,
0x00, 0x01, 0x1F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x03,
0x00, 0x0C, 0x20, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
0x00, 0x30, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x00, 0x06,
0x38, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFC, 0x00, 0x06,
0xC0, 0x7F, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x06, 0x00, 0x06,
0x80, 0xBF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xFF, 0xFB, 0x00, 0x06,
0x80, 0x7F, 0xFF, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xFF, 0xFD, 0x80, 0x04,
0x81, 0x7F, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xFF, 0xFD, 0x80, 0x04,
0x80, 0xFF, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0xFF, 0xFE, 0xC0, 0x0C,
0x82, 0xFF, 0xFF, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0xFF, 0xFF, 0xC0, 0x0C,
0x81, 0xFF, 0xFF, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCF, 0xFF, 0xFF, 0xE0, 0x0C,
0x85, 0xFF, 0xFF, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDF, 0xFF, 0xFF, 0xFF, 0xFC,
0x8B, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x9F, 0xFF, 0xFF, 0xFF, 0xFC,
0x7F, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7F, 0xFF, 0xFF, 0xFF, 0xF8,
0x7F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8,
0x7F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
0x7F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
0x7F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00,
0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00,
0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
0x00, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0x00, 0x00,
0x00, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFE, 0x00, 0x00,
0x00, 0x7F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFE, 0x00, 0x00,
0x00, 0x7F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x00,
0x00, 0x3F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xF8, 0x00, 0x00,
0x00, 0x1F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF8, 0x00, 0x00,
0x00, 0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00,
0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static const unsigned char PROGMEM rfid[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x0F, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x1C, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x38, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x70, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xC1, 0xC0, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0xC3, 0x83, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x87, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0x0E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0x0C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x07, 0x1C, 0x70, 0x78, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x06, 0x18, 0x60, 0xF8, 0x00, 0x00, 0x03, 0xC0, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x06, 0x38, 0xE1, 0xC0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x06, 0x30, 0xC3, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x0E, 0x30, 0xC7, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x20, 0x00, 0x1F, 0xE0, 0x00, 0x00,
0x00, 0x00, 0x0C, 0x31, 0xC6, 0x07, 0xFF, 0xFF, 0xF8, 0x01, 0xF0, 0x00, 0x00, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x0C, 0x31, 0x86, 0x0F, 0xFF, 0xFF, 0xFC, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0C, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x1C, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x1C, 0x00, 0xF8, 0xFC, 0x00, 0x00, 0x20, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x0F, 0x0F, 0xE0, 0xDF, 0x80, 0x00, 0xE0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x07, 0xFF, 0x01, 0xC7, 0xF8, 0x03, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0xFE, 0x03, 0x86, 0x78, 0x0F, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0F, 0xFF, 0x0E, 0x60, 0x3E, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0E, 0x78, 0x1C, 0xE1, 0xF8, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0F, 0x00, 0x38, 0xFF, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xF0, 0x71, 0xDE, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF9, 0xFF, 0xE7, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xCF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() 
{
  //Reglages pins boutons et leds
  pinMode(BPD, INPUT_PULLUP);
  pinMode(BPG, INPUT_PULLUP);
  pinMode(BPJD, INPUT_PULLUP);
  pinMode(BPJG, INPUT_PULLUP);
  pinMode(Led1R, OUTPUT);
  pinMode(Led1G, OUTPUT);
  pinMode(Led1B, OUTPUT);
  pinMode(Led2R, OUTPUT);
  pinMode(Led2G, OUTPUT);
  pinMode(Led2B, OUTPUT);

  digitalWrite(Led1B, HIGH);
  digitalWrite(Led2R, HIGH);  
  
  pinMode(21, OUTPUT);
  if(analogRead(A6)>800)  //Si tension baterie sup a 800, maintenir relay
  {
    digitalWrite(21, HIGH);
  }
  
  
  Serial.begin(38400);
  mSerial.begin(38400);
  myTransfer.begin(mSerial);

 
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  
  //Nettoie le buffer I2C
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(5,0);
  display.println("Cybertruck"); 

  // Dessine le bitmap sur l'ecran
  display.drawBitmap(0, 16, image_data_Saraarray, 128, 54, 1);
  display.display();
  delay(3000);
  //Reglages Ecran
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(7,0);
  display.println("Scannez votre badge"); 
  display.drawBitmap(0, 16, rfid, 128, 48, 1);
  display.display();
}
 
void loop() 
{
  if(analogRead(A6)<800)  //Si tension baterie inf a 800, entindre commande
  {
    digitalWrite(21, LOW);
  } 

  if(millis()- last_time>500) //affichage image acceil apres 500ms
  {
    last_time=millis();
    acceuil=1;
  }

  if(myTransfer.available()) //Reception Buffer
  {
    connection=1; //Connection flag maj
    uint16_t recSize = 0;
    recSize = myTransfer.rxObj(testStruct, recSize);  
  }
  else
  {
    connection=0; //Connection flag maj
  }
  if(testStruct.RFID_State) //If bonne carte presentee
  {
  uint16_t sendSize = 0; //Envoi buffer
  sendSize = myTransfer.txObj(testStruct, sendSize);
  myTransfer.sendData(sendSize);
  
  if(acceuil) //Acceuil
  {
    acceuil_fct();
  }


  // MENU
  if (!digitalRead(BPD))
  {
    delay(10);
    BPD_state=1;
  }
  if (digitalRead(BPD) && BPD_state) // si appui sur bp joustick droit
  {
    BPD_state=0;                     
    menu=1;                         
    menu_fct();    //entree dans fentre du menu
    while (digitalRead(BPJD)&& digitalRead(BPJG) ){
    }
    delay(10);
    if(!digitalRead(BPJD)){
      digitalWrite(21, LOW);
    }
    if(!digitalRead(BPJG)){ 
      delay(10);
      acceuil=1;  //Maj flag acceuil
    }        
    }



//  Choix des modes
      if (!digitalRead(BPG)){
      delay(10);
      BPG_state=1;
    }
    if (digitalRead(BPG) && BPG_state){
      BPG_state=0;
      mode=1;
      
      while (digitalRead(BPJD)&& digitalRead(BPJG)){ 
        if (analogRead(A0)<100){    //Detecte le mouvement vertical du joystick
          while(analogRead(A0)<500){  //incremente de 1 si joystick mont
        }
          if(L<1){
            L++;
          }
        }
        if (analogRead(A0)>900){   // decremente de 1 si joystick descendu
          while(analogRead(A0)>600){
        }
        if(L>0){
          L--;
        }
        
      }
      mode_fct();  //Affichage ecran modes
      }
      if (!digitalRead(BPJD)){  
        delay(10);
        while(!digitalRead(BPJD)){
      }
      delay(10);
      //Choix des modes selon la position de la fleche
      if(L==0){
        mode_manuel();
      }
      if(L==1){
        mode_auto();
      }
      }
      if (!digitalRead(BPJG)){
        delay(10);
        acceuil=1;
      }    
      }
      
    
    
  }
  delay(20);
}



void acceuil_fct (){
  display.clearDisplay();
  display.drawBitmap(0, 0, bluetooth, 8, 16, 1);
  if(connection){
    display.drawBitmap(10, 0, signal1, 16, 16, 1);
  }
  else{
    display.drawBitmap(10, 0, nosignal1, 16, 16, 1);
  }
  if(analogRead(A6)>=910){
    display.drawBitmap(119, 0, battery5, 8, 16, 1);
  }  
  else if(analogRead(A6)>=890 && analogRead(A6)<910){
    display.drawBitmap(119, 0, battery4, 8, 16, 1);
  }
  else if(analogRead(A6)>=850 && analogRead(A6)<890){
    display.drawBitmap(119, 0, battery3, 8, 16, 1);
  }
  else if(analogRead(A6)>=830 && analogRead(A6)<850){
    display.drawBitmap(119, 0, battery2, 8, 16, 1);
  }
   else{ 
    display.drawBitmap(119, 0, battery1, 8, 16, 1);
  }
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(80,48);
  display.println("Menu");
  display.setCursor(0,48);
  display.println("Mode");
  display.display();
  acceuil=0;
}



void menu_fct (){
   menu=0;
   display.clearDisplay();
   display.setTextSize(2);
   display.setTextColor(WHITE);
   display.setCursor(40,0);
   display.println("Menu");
   display.drawBitmap(0, 16, fleche, 16, 16, 1);
   display.setTextSize(1);
   display.setTextColor(WHITE);
   display.setCursor(24,20);
   display.println("Eteindre");
   display.display();
}



void mode_fct (){
   mode=0;
   display.clearDisplay();
   display.setTextSize(2);
   display.setTextColor(WHITE);
   display.setCursor(40,0);
   display.println("Mode");
   if(L==0){       //Deplacement de la fleche selon la valeur de L
     display.drawBitmap(0, 16, fleche, 16, 16, 1);
   }
   if(L==1){
     display.drawBitmap(0, 32, fleche, 16, 16, 1);
   }
   display.setTextSize(1);
   display.setTextColor(WHITE);
   display.setCursor(20,20);
   display.println("Mode manuel");
   display.setCursor(20,36);
   display.println("Mode auto");
   display.display();
}




void mode_manuel(){
  delay(10);
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("Mode Manu");
  display.display();
  testStruct.Mode=1; //flag mode maj

  while(digitalRead(BPJG)){
    testStruct.Joy1X=analogRead(A1);
    testStruct.Joy1Y=analogRead(A0);
    uint16_t sendSize = 0;  //Envoi buffer
    sendSize = myTransfer.txObj(testStruct, sendSize);
    myTransfer.sendData(sendSize);
    delay(20);
  }
  testStruct.Mode=0; //flag mode maj
  }

void mode_auto(){
  delay(10);
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("Mode Auto");
  display.display();
  testStruct.Mode=2; //flag mode maj

  uint16_t sendSize = 0; //Envoi buffer
  sendSize = myTransfer.txObj(testStruct, sendSize);
  myTransfer.sendData(sendSize);
  while(digitalRead(BPJG)){
  }
  testStruct.Mode=0;
  }