<<<<<<< Updated upstream
/*  Arduino DC Motor Control - PWM | H-Bridge | L298N
         Example 02 - Arduino Robot Car Control
    by Dejan Nedelkovski, www.HowToMechatronics.com
*/
#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal.h>
#include <NewPing.h>
 
#define SS_PIN 53
#define RST_PIN 5




#define enA 3
#define in1 39
#define in2 37
#define enB 4
#define in3 43
#define in4 45

int motorSpeedA = 0;
int motorSpeedB = 0;

int Sw = 49; 

const int pinultra = 23; // Trigger Pin of Ultrasonic Sensor
const int pinson = 25; // Echo Pin of Ultrasonic Sensor
int dist;
int vitesse;

// defines variables
long duration; // variable for the duration of sound wave travel
int distance; // variable for the distance measurement

=======
//Ceci est le programme manuel
#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal.h>
 
#define SS_PIN 10
#define RST_PIN 9
#define echoPin 14 // attach pin D14 Arduino to pin Echo of HC-SR04
#define trigPin 15 //attach pin D15 Arduino to pin Trig of HC-SR04


// defines variables
long duration; // variable for the duration of sound wave travel
int distance; // variable for the distance measurement

int enA= 3;     //Assigner Pin 9 pour ENA
int in1 = 39;
int in2 = 37;

int enB = 4;
int in3 = 43;
int in4 = 45;

int joyVert = A0;
int joyHorz = A1;

// Motor Speed Values - Start at zero 

int MotorSpeed1 = 0;
int MotorSpeed2 = 0; 

// Joystick Values - Start at 512 (middle position) 

int joyposVert = 512;
int joyposHorz = 512; 
>>>>>>> Stashed changes

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.

// initialize the library with the numbers of the interface pins
LiquidCrystal lcd = LiquidCrystal(2, 3, 4, 5, 6, 7);


MFRC522 rfid(SS_PIN, RST_PIN); // Instance of the class
bool pass = 0;

// Init array that will store new NUID 
byte nuidPICC[4];

<<<<<<< Updated upstream

void setup() {
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(Sw,INPUT_PULLUP);
  pinMode(22,OUTPUT);
  digitalWrite(22,HIGH);

=======
void setup() {
 
  
>>>>>>> Stashed changes
 Serial.begin(9600);   // Initiate a serial communication
 SPI.begin();      // Initiate  SPI bus
 mfrc522.PCD_Init();   // Initiate MFRC522
 Serial.println("Approximate your card to the reader...");
 Serial.println();
<<<<<<< Updated upstream

=======
 pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
 pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT
>>>>>>> Stashed changes
 Serial.begin(9600); // // Serial Communication is starting with 9600 of baudrate speed
 Serial.println("Ultrasonic Sensor HC-SR04 Test"); // print some text in Serial Monitor
 Serial.println("with Arduino UNO R3");

<<<<<<< Updated upstream
   pinMode(pinultra, OUTPUT);
  pinMode(pinson, INPUT);
}

void loop() {
 
  int xAxis = analogRead(A9); // Read Joysticks X-axis
  int yAxis = analogRead(A8); // Read Joysticks Y-axis

  // Y-axis used for forward and backward control
  if (yAxis < 470) {
    // Set Motor A backward
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
  
    // Set Motor B backward
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
    
    // Convert the declining Y-axis readings for going backward from 470 to 0 into 0 to 255 value for the PWM signal for increasing the motor speed
    motorSpeedA = map(yAxis, 470, 0, 0, 255);
    motorSpeedB = map(yAxis, 470, 0, 0, 255);

  }
  else if (yAxis > 550) {
    // Set Motor A forward
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    
    // Set Motor B forward
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
   
    // Convert the increasing Y-axis readings for going forward from 550 to 1023 into 0 to 255 value for the PWM signal for increasing the motor speed
    motorSpeedA = map(yAxis, 550, 1023, 0, 255);
    motorSpeedB = map(yAxis, 550, 1023, 0, 255);

  }
  // If joystick stays in middle the motors are not moving
  else {
    motorSpeedA = 0;
    motorSpeedB = 0;
 
  }

  // X-axis used for left and right control
  if (xAxis < 470) {
    // Convert the declining X-axis readings from 470 to 0 into increasing 0 to 255 value
    int xMapped = map(xAxis, 470, 0, 0, 255);
    // Move to left - decrease left motor speed, increase right motor speed
    motorSpeedA = motorSpeedA - xMapped;
    motorSpeedB = motorSpeedB + xMapped;
    
    // Confine the range from 0 to 255
    if (motorSpeedA < 0) {
      motorSpeedA = 0;
    }
    if (motorSpeedB > 255) {
      motorSpeedB = 255;
    }
    
  }
  if (xAxis > 550) {
    // Convert the increasing X-axis readings from 550 to 1023 into 0 to 255 value
    int xMapped = map(xAxis, 550, 1023, 0, 255);
    // Move right - decrease right motor speed, increase left motor speed
    motorSpeedA = motorSpeedA + xMapped;
    motorSpeedB = motorSpeedB - xMapped;
    
    // Confine the range from 0 to 255
    if (motorSpeedA > 255) {
      motorSpeedA = 255;
    }
    if (motorSpeedB < 0) {
      motorSpeedB = 0;
    }
    
  }
  // Prevent buzzing at low speeds (Adjust according to your motors. My motors couldn't start moving if PWM value was below value of 70)
  if (motorSpeedA < 70) {
    motorSpeedA = 0;
  }
  if (motorSpeedB < 70) {
    motorSpeedB = 0;
  }
   
  analogWrite(enA, motorSpeedA); // Send PWM signal to motor A
  analogWrite(enB, motorSpeedB); // Send PWM signal to motor B

  lcd.display();
  delay(500);
  
 

=======
// Set all the motor control pins to outputs


pinMode(enA,OUTPUT);
pinMode(enB,OUTPUT);
pinMode(in1,OUTPUT);
pinMode(in2,OUTPUT);
pinMode(in3,OUTPUT);
pinMode(in4,OUTPUT);

// Start with motors disabled an direction as forward

// Motor A
digitalWrite(enA, LOW);
digitalWrite(in1,HIGH);
digitalWrite(in2,LOW);

// MotoR B
digitalWrite(enB,LOW);
digitalWrite(in3,HIGH);
digitalWrite(in4,LOW);

}

void loop() 
{
    // lcd.setCursor(0,1);
 // lcd.print(millis()/1000);
   // Turn off the display:
  //lcd.noDisplay();
  //delay(500);
  // Turn on the display:
  lcd.display();
  delay(500);
  
  // Clears the trigPin condition
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  // Displays the distance on the Serial Monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
  delay (300);
  

  
>>>>>>> Stashed changes
  // Look for new cards
  if ( ! mfrc522.PICC_IsNewCardPresent()) 
  {
    return;
  }
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) 
  {
    return;
  }
  //Show UID on serial monitor
  lcd.setCursor(0,0);
  Serial.print("UID tag :");
  lcd.print("UID:");
  String content= "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(mfrc522.uid.uidByte[i], HEX);
     lcd.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     lcd.print(mfrc522.uid.uidByte[i], HEX);
     content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.print("Message : ");
  lcd.print("Message : ");
  content.toUpperCase();
 // if (content.substring(1) == "BD 31 15 2B") //change here the UID of the card/cards that you want to give access
  if (content.substring(1) == "47 48 C0 A7")
  {
    lcd.setCursor(0,1);
    Serial.println("Authorized access");
    Serial.println();
    lcd.print("Auth access     ");
    lcd.println();
    pass = 1;
    delay(3000);
  }
 
 else   {
    lcd.setCursor(0,1);
    Serial.println(" Access denied");
    lcd.print(" Access denied  ");
    delay(3000);
    return;
 }
<<<<<<< Updated upstream


if (digitalRead(Sw) == 1){//distance = distance_sonar();
  Serial.print ("dist = ");
  Serial.println (distance);}
}

long microsecondsToCentimeters(long microseconds) {
   return microseconds / 29 / 2;
}

int distance_sonar(){
  long duration, inches, cm;
  bool state;
  digitalWrite(pinultra, LOW);
  delayMicroseconds(2);
  digitalWrite(pinultra, HIGH);
  delayMicroseconds(10);
  digitalWrite(pinultra, LOW);
  
  duration = pulseIn(pinson, HIGH);
  cm = microsecondsToCentimeters(duration);
  return cm;
  }
=======
 if (pass == 1);
 {
  // Read the Joystick X and Y positions

  joyposVert = analogRead(joyVert);
  joyposHorz = analogRead(joyHorz);

  // Determine if this is a forward or backward motion
  // Do this by reading the Vertical Value
  // Apply results to MotorSpeed and to Direction
  if (joyposVert < 460)

  {
    // This is Backward Movement
    // Set Motor A backward

    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);

    // Set Motor B backward

    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);

    // Determine Motor Speeds
    // As we are going backwards we need to reverse readings

    joyposVert = joyposVert - 460;                       // This produces a negative number
    joyposVert = joyposVert * -1;                         // Make the number positive
    MotorSpeed1 = map(joyposVert, 0, 460, 0, 255);
    MotorSpeed2 = map(joyposVert, 0, 460, 0, 255);

  }

  else if (joyposVert > 564)
  {
    // This is Forward Movement

    // Set Motor A forward

    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);

    // Set Motor B forward

    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);

    // Determine Motor Speeds

    MotorSpeed1 = map(joyposVert, 564, 1023, 0, 255);
    MotorSpeed2 = map(joyposVert, 564, 1023, 0, 255);

  }
  else
  {

    // This (Motor) is Stopped

    MotorSpeed1 = 0;
    MotorSpeed2 = 0;

  }

  /* Now do the steering

     The Horizontal position will "weigh" the motor speed

     Values for each motor */

  if (joyposHorz < 460)
  {
    // Move Left

    /* As we are going left we need to reverse readings */

    joyposHorz = joyposHorz - 460;                       // This produces a negative number
    joyposHorz = joyposHorz * -1;                          // Make the number positive

    /* Map the number to a value of 255 maximum */

    joyposHorz = map(joyposHorz, 0, 460, 0, 255);
    MotorSpeed1 = MotorSpeed1 - joyposHorz;
    MotorSpeed2 = MotorSpeed2 + joyposHorz;

    /* Don't exceed range of 0-255 for motor speeds */
    if (MotorSpeed1 < 0)MotorSpeed1 = 0;
    if (MotorSpeed2 > 255)MotorSpeed2 = 255;
  }
  else if (joyposHorz > 564)
  {
    // Move Right
    // Map the number to a value of 255 maximum

    joyposHorz = map(joyposHorz, 564, 1023, 0, 255);       
    MotorSpeed1 = MotorSpeed1 + joyposHorz;
    MotorSpeed2 = MotorSpeed2 - joyposHorz;

    if (MotorSpeed1 > 255)MotorSpeed1 = 255;          // Don't exceed range of 0-255 for motor
                                                                                    //   speeds
    if (MotorSpeed2 < 0)MotorSpeed2 = 0;                  // When range is less than 0 for motor                                                                                      
                                                                                       //speeds

 }
  // Adjust to prevent "buzzing" at very low speed

  if (MotorSpeed1 < 8)MotorSpeed1 = 0;
  if (MotorSpeed2 < 8)MotorSpeed2 = 0;

  // Set the motor speeds

  analogWrite(enA, MotorSpeed1);

  analogWrite(enB, MotorSpeed2);
}}
>>>>>>> Stashed changes
